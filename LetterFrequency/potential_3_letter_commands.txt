## SHAPES ##
Rec: rectangle (#62)
Lin: line (#34)
Arc: circle/ellipse (#480) - perhaps function overrides

## MATH & Numbers ##
Int: number (#25)
Lit: literal number (#186)
Add: add (#130)
Ide: divide (#206)
Sub: subtract (#143)
Log: log (#138) - override for different bases
Exp: exponentiation (#124)
Mod: modulo (#256)
Tim: multiply (#83)

## Lists ##
Lis: List constructor, can place arbitrarily many arguments and they will form a list (#56)
Ind: List index access operator to access the nth element of a list (#85)
App: List append operator (list, value, index?) (#87) --location is optional, default is end of list. Other values shift. not the same as replace
Rep: List set operator "replace" (list, index, value) (#90) -- replaces index with value
Del: List delete operator. (list, index?) (#317) -- defaults to removing first value, otherwise removes at index. Other values shift.

## Conditionals ##
Whe: If (condition, statementIfTrue, statementIfFalse?) (#111)
Les: Less than (#211)
Mor: Greater than (#52)
Als: And operator (#169) -- Yes, I could make this "and", but "and" has a score of almost 2.5%, which I think is too high.
Oth: Or operator (#116)
Par: Equal operator (#31) -- works not just for numbers
Inv: Not operator (#384)

## Loops ##
Whi: While loop (condition, statementWhileTrue) (#97)
Fre: For each loop (word, list, statementUsingWord) (#73) -- The "word" is the next word, like in variable declaration
-- I'm thinking of not doing a standard for loop for a couple reasons. 
-- The main one is that in this lisp-like syntax I don't really see the advantage over while.
-- The other is that "for" got a score of over 1%, which I think is a little too high.

## Functions ##
Fun: Function declaration (name, arguments, statement) (#313) -- Name, Arguments are words until the statement begins 
-- Next word after fun is the function name, next words are arguments until "sta" is found in a word.
-- Things like this are what make me think maybe we should just stick to one command per word max.

## Other ##
Pri: print (#29)
Was: variable declaration (#58)
Sta: Begin statement, like an opening parenthesis but only for blocks of code where it's needed (#18) 
-- An alternative idea to Sta is to count all capital letters as beginnings of statements, 
-- but that would be a bit weird judging that parentheses close them, so you'd need to find proper nouns mid-sentence. 
Not: ignore all text up until the next punctuation (#17) - could be useful, could also get in the way
any punctuation (commas, periods, semicolons, etc.): equivalent of close parentheses